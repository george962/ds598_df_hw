{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactory-ds598"
		},
		"GitHub_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'GitHub'"
		},
		"Storage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'Storage'"
		},
		"Air_Pollution_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": " http://api.openweathermap.org/ "
		},
		"GitHub_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "george962"
		},
		"Historical_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://history.openweathermap.org/"
		},
		"KeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://OpenWeather.vault.azure.net/"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://history.openweathermap.org/"
		},
		"Storage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ds598storage.dfs.core.windows.net/"
		},
		"test_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://openweather.vault.azure.net/secrets/OpenWeatherAPI/945ba958d3f544448ee21400a2abbd81?api-version=7.0"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Air_Pollution')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Air_Pollution_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GitHub')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('GitHub_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('GitHub_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDQ2RTMxOEQxLTNBMzktNDVBMi04NTBBLTRFRDAxM0I5NjMzOV9jODYxMTM1ZS1mOWE3LTQ4NWItOGMxNC03MDliMmVjN2VhNDkiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historical')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Historical_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('KeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Storage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('Storage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/test')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('test_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_Air_Pollution')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "air_pollution_year.json",
						"folderPath": "Bronze/Air_Pollution",
						"fileSystem": "container-ds598"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"coord": {
							"type": "object",
							"properties": {
								"lon": {
									"type": "number"
								},
								"lat": {
									"type": "number"
								}
							}
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"main": {
										"type": "object",
										"properties": {
											"aqi": {
												"type": "integer"
											}
										}
									},
									"components": {
										"type": "object",
										"properties": {
											"co": {
												"type": "number"
											},
											"no": {
												"type": "integer"
											},
											"no2": {
												"type": "number"
											},
											"o3": {
												"type": "number"
											},
											"so2": {
												"type": "number"
											},
											"pm2_5": {
												"type": "number"
											},
											"pm10": {
												"type": "number"
											},
											"nh3": {
												"type": "number"
											}
										}
									},
									"dt": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_Historical')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Bronze/data/2.5/history",
						"fileSystem": "container-ds598"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "number"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Air_Pollution')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Air_Pollution",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "string",
						"defaultValue": "42.3601"
					},
					"lon": {
						"type": "string",
						"defaultValue": "-71.0589"
					},
					"start": {
						"type": "string",
						"defaultValue": "@div(sub(ticks(addDays(utcNow(), -365)), ticks('1970-01-01T00:00:00Z')), 10000000)"
					},
					"end": {
						"type": "string",
						"defaultValue": "@div(sub(ticks(utcNow()), ticks('1970-01-01T00:00:00Z')), 10000000)"
					},
					"appid": {
						"type": "string",
						"defaultValue": "@activity('Web1').output.value"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/air_pollution/history?lat=@{dataset().lat}&lon=@{dataset().lon}&start=@{dataset().start}&end=@{dataset().end}&appid=@{activity('Web1').output.value}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Air_Pollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historical_Weather')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historical",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"start": {
						"type": "string",
						"defaultValue": "@div(sub(ticks(addDays(utcNow(), add(-7, mul(item(), -7)))), ticks('1970-01-01T00:00:00Z')), 10000000)"
					},
					"end": {
						"type": "string",
						"defaultValue": "@div(sub(ticks(addDays(utcNow(), mul(item(), -7))), ticks('1970-01-01T00:00:00Z')), 10000000)"
					},
					"appid": {
						"type": "string",
						"defaultValue": "@activity('Web1').output.value"
					},
					"lat": {
						"type": "string",
						"defaultValue": "42.3601"
					},
					"lon": {
						"type": "string",
						"defaultValue": "-71.3824"
					},
					"dataType": {
						"type": "string",
						"defaultValue": "\"hour\""
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/history/city?lat=@{dataset().lat}&lon=@{dataset().lon}&type=@{dataset().dataType}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historical')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "silver_weather_historical.parquet",
						"folderPath": "Silver",
						"fileSystem": "container-ds598"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "silver_airpollution_historical.parquet",
						"folderPath": "Silver",
						"fileSystem": "container-ds598"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "string",
						"defaultValue": "42.3601"
					},
					"lon": {
						"type": "string",
						"defaultValue": "-71.3824"
					},
					"dataType": {
						"type": "string",
						"defaultValue": "\"hour\""
					},
					"appid": {
						"type": "string",
						"defaultValue": "@activity('Web1').output.value"
					},
					"start": {
						"type": "string",
						"defaultValue": "@div(sub(ticks(addDays(utcNow(), add(-7, mul(item(), -7)))), ticks('1970-01-01T00:00:00Z')), 10000000)"
					},
					"end": {
						"type": "string",
						"defaultValue": "@div(sub(ticks(addDays(utcNow(), mul(item(), -7))), ticks('1970-01-01T00:00:00Z')), 10000000)"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "data/2.5/history/city?lat=@{dataset().lat}&lon=@{dataset().lon}&type=@{dataset().dataType}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}&units=imperial",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Bronze_Air_Pollution')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://OpenWeather.vault.azure.net/secrets/OpenWeatherAPI?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net/"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Air_Pollution",
								"type": "DatasetReference",
								"parameters": {
									"lat": "42.3601",
									"lon": "-71.0589",
									"start": "@div(sub(ticks(addDays(utcNow(), -365)), ticks('1970-01-01T00:00:00Z')), 10000000)",
									"end": "@div(sub(ticks(utcNow()), ticks('1970-01-01T00:00:00Z')), 10000000)",
									"appid": "@activity('Web1').output.value"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Air_Pollution",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Current_Index": {
						"type": "Integer"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Air_Pollution')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Air_Pollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Bronze_Historical_Weather')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://openweather.vault.azure.net/secrets/OpenWeatherAPI/945ba958d3f544448ee21400a2abbd81?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, 52)",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "RestResource2",
											"type": "DatasetReference",
											"parameters": {
												"lat": "42.3601",
												"lon": "-71.3824",
												"dataType": "\"hour\"",
												"appid": "@activity('Web1').output.value",
												"start": "@div(sub(ticks(addDays(utcNow(), add(-7, mul(item(), -7)))), ticks('1970-01-01T00:00:00Z')), 10000000)",
												"end": "@div(sub(ticks(addDays(utcNow(), mul(item(), -7))), ticks('1970-01-01T00:00:00Z')), 10000000)"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ADLS_Historical",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Date_Range": {
						"type": "Array",
						"defaultValue": [
							{
								"Start_Date": "2023-09-18T00:00:00Z",
								"End_Date": "2023-09-24T00:00:00Z"
							},
							{
								"Start_Date": "2023-09-25T00:00:00Z",
								"End_Date": "2023-10-01T00:00:00Z"
							},
							{
								"Start_Date": "2023-10-02T00:00:00Z",
								"End_Date": "2023-10-08T00:00:00Z"
							},
							{
								"Start_Date": "2023-10-09T00:00:00Z",
								"End_Date": "2023-10-15T00:00:00Z"
							},
							{
								"Start_Date": "2023-10-16T00:00:00Z",
								"End_Date": "2023-10-22T00:00:00Z"
							},
							{
								"Start_Date": "2023-10-23T00:00:00Z",
								"End_Date": "2023-10-29T00:00:00Z"
							},
							{
								"Start_Date": "2023-10-30T00:00:00Z",
								"End_Date": "2023-11-05T00:00:00Z"
							},
							{
								"Start_Date": "2023-11-06T00:00:00Z",
								"End_Date": "2023-11-12T00:00:00Z"
							},
							{
								"Start_Date": "2023-11-13T00:00:00Z",
								"End_Date": "2023-11-19T00:00:00Z"
							},
							{
								"Start_Date": "2023-11-20T00:00:00Z",
								"End_Date": "2023-11-26T00:00:00Z"
							},
							{
								"Start_Date": "2023-11-27T00:00:00Z",
								"End_Date": "2023-12-03T00:00:00Z"
							},
							{
								"Start_Date": "2023-12-04T00:00:00Z",
								"End_Date": "2023-12-10T00:00:00Z"
							},
							{
								"Start_Date": "2023-12-11T00:00:00Z",
								"End_Date": "2023-12-17T00:00:00Z"
							},
							{
								"Start_Date": "2023-12-18T00:00:00Z",
								"End_Date": "2023-12-24T00:00:00Z"
							},
							{
								"Start_Date": "2023-12-25T00:00:00Z",
								"End_Date": "2023-12-31T00:00:00Z"
							},
							{
								"Start_Date": "2024-01-01T00:00:00Z",
								"End_Date": "2024-01-07T00:00:00Z"
							},
							{
								"Start_Date": "2024-01-08T00:00:00Z",
								"End_Date": "2024-01-14T00:00:00Z"
							},
							{
								"Start_Date": "2024-01-15T00:00:00Z",
								"End_Date": "2024-01-21T00:00:00Z"
							},
							{
								"Start_Date": "2024-01-22T00:00:00Z",
								"End_Date": "2024-01-28T00:00:00Z"
							},
							{
								"Start_Date": "2024-01-29T00:00:00Z",
								"End_Date": "2024-02-04T00:00:00Z"
							},
							{
								"Start_Date": "2024-02-05T00:00:00Z",
								"End_Date": "2024-02-11T00:00:00Z"
							},
							{
								"Start_Date": "2024-02-12T00:00:00Z",
								"End_Date": "2024-02-18T00:00:00Z"
							},
							{
								"Start_Date": "2024-02-19T00:00:00Z",
								"End_Date": "2024-02-25T00:00:00Z"
							},
							{
								"Start_Date": "2024-02-26T00:00:00Z",
								"End_Date": "2024-03-03T00:00:00Z"
							},
							{
								"Start_Date": "2024-03-04T00:00:00Z",
								"End_Date": "2024-03-10T00:00:00Z"
							},
							{
								"Start_Date": "2024-03-11T00:00:00Z",
								"End_Date": "2024-03-17T00:00:00Z"
							},
							{
								"Start_Date": "2024-03-18T00:00:00Z",
								"End_Date": "2024-03-24T00:00:00Z"
							},
							{
								"Start_Date": "2024-03-25T00:00:00Z",
								"End_Date": "2024-03-31T00:00:00Z"
							},
							{
								"Start_Date": "2024-04-01T00:00:00Z",
								"End_Date": "2024-04-07T00:00:00Z"
							},
							{
								"Start_Date": "2024-04-08T00:00:00Z",
								"End_Date": "2024-04-14T00:00:00Z"
							},
							{
								"Start_Date": "2024-04-15T00:00:00Z",
								"End_Date": "2024-04-21T00:00:00Z"
							},
							{
								"Start_Date": "2024-04-22T00:00:00Z",
								"End_Date": "2024-04-28T00:00:00Z"
							},
							{
								"Start_Date": "2024-04-29T00:00:00Z",
								"End_Date": "2024-05-05T00:00:00Z"
							},
							{
								"Start_Date": "2024-05-06T00:00:00Z",
								"End_Date": "2024-05-12T00:00:00Z"
							},
							{
								"Start_Date": "2024-05-13T00:00:00Z",
								"End_Date": "2024-05-19T00:00:00Z"
							},
							{
								"Start_Date": "2024-05-20T00:00:00Z",
								"End_Date": "2024-05-26T00:00:00Z"
							},
							{
								"Start_Date": "2024-05-27T00:00:00Z",
								"End_Date": "2024-06-02T00:00:00Z"
							},
							{
								"Start_Date": "2024-06-03T00:00:00Z",
								"End_Date": "2024-06-09T00:00:00Z"
							},
							{
								"Start_Date": "2024-06-10T00:00:00Z",
								"End_Date": "2024-06-16T00:00:00Z"
							},
							{
								"Start_Date": "2024-06-17T00:00:00Z",
								"End_Date": "2024-06-23T00:00:00Z"
							},
							{
								"Start_Date": "2024-06-24T00:00:00Z",
								"End_Date": "2024-06-30T00:00:00Z"
							},
							{
								"Start_Date": "2024-07-01T00:00:00Z",
								"End_Date": "2024-07-07T00:00:00Z"
							},
							{
								"Start_Date": "2024-07-08T00:00:00Z",
								"End_Date": "2024-07-14T00:00:00Z"
							},
							{
								"Start_Date": "2024-07-15T00:00:00Z",
								"End_Date": "2024-07-21T00:00:00Z"
							},
							{
								"Start_Date": "2024-07-22T00:00:00Z",
								"End_Date": "2024-07-28T00:00:00Z"
							},
							{
								"Start_Date": "2024-07-29T00:00:00Z",
								"End_Date": "2024-08-04T00:00:00Z"
							},
							{
								"Start_Date": "2024-08-05T00:00:00Z",
								"End_Date": "2024-08-11T00:00:00Z"
							},
							{
								"Start_Date": "2024-08-12T00:00:00Z",
								"End_Date": "2024-08-18T00:00:00Z"
							},
							{
								"Start_Date": "2024-08-19T00:00:00Z",
								"End_Date": "2024-08-25T00:00:00Z"
							},
							{
								"Start_Date": "2024-08-26T00:00:00Z",
								"End_Date": "2024-09-01T00:00:00Z"
							},
							{
								"Start_Date": "2024-09-02T00:00:00Z",
								"End_Date": "2024-09-08T00:00:00Z"
							},
							{
								"Start_Date": "2024-09-09T00:00:00Z",
								"End_Date": "2024-09-15T00:00:00Z"
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource2')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Historical')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Air_Pollution')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_Air_Pollution",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						},
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          coord as (lon as double, lat as double),",
						"          list as (main as (aqi as integer), components as (co as double, no as integer, no2 as double, o3 as double, so2 as double, pm2_5 as double, pm10 as double, nh3 as double), dt as integer)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source1",
						"flatten1 derive(corrected_timestamp = iif(length(toString({timestamp})) == 10, toInteger({timestamp}), toInteger(null())),",
						"          location = 'Boston') ~> derivedColumn1",
						"derivedColumn1 filter(!isNull({aqi}) && !isNull(corrected_timestamp)) ~> filter1",
						"filter1 derive(corrected_timestamp = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          aqi = round(aqi, 2),",
						"          co = round(co, 2),",
						"          no = round(no, 2),",
						"          no2 = round(no2, 2),",
						"          o3 = round(o3, 2),",
						"          so2 = round(so2, 2),",
						"          pm2_5 = round(pm2_5, 2),",
						"          pm10 = round(pm10, 2),",
						"          nh3 = round(nh3, 2)) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          lon,",
						"          lat,",
						"          aqi,",
						"          co,",
						"          no,",
						"          no2,",
						"          o3,",
						"          so2,",
						"          pm2_5,",
						"          pm10,",
						"          nh3,",
						"          corrected_timestamp,",
						"          location,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source1 foldDown(unroll(list),",
						"     mapColumn(",
						"          lon = coord.lon,",
						"          lat = coord.lat,",
						"          aqi = list.main.aqi,",
						"          co = list.components.co,",
						"          no = list.components.no,",
						"          no2 = list.components.no2,",
						"          o3 = list.components.o3,",
						"          so2 = list.components.so2,",
						"          pm2_5 = list.components.pm2_5,",
						"          pm10 = list.components.pm10,",
						"          nh3 = list.components.nh3,",
						"          timestamp = list.dt",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['silver_airpollution_historical.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLS_Air_Pollution')]",
				"[concat(variables('factoryId'), '/datasets/Parquet2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historical')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_Historical",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          message as string,",
						"          cod as string,",
						"          city_id as integer,",
						"          calctime as double,",
						"          cnt as integer,",
						"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['Bronze/data/2.5/history/*.json']) ~> source2",
						"source2 foldDown(unroll(list),",
						"     mapColumn(",
						"          message,",
						"          cod,",
						"          city_id,",
						"          calctime,",
						"          cnt,",
						"          timestamp = list.dt,",
						"          feels_like = list.main.feels_like,",
						"          humidity = list.main.humidity,",
						"          pressure = list.main.pressure,",
						"          temp = list.main.temp,",
						"          temp_max = list.main.temp_max,",
						"          temp_min = list.main.temp_min,",
						"          weather_description = list.weather.description,",
						"          weather_icon = list.weather.icon,",
						"          weather_id = list.weather.id,",
						"          weather_main = list.weather.main,",
						"          wind_deg = list.wind.deg,",
						"          wind_speed = list.wind.speed,",
						"          clouds_all = list.clouds.all",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 derive(corrected_timestamp = iif(length(toString(timestamp)) > 10, 0, timestamp),",
						"          location = 'Boston') ~> derivedColumn2",
						"derivedColumn2 filter(!isNull(temp) && !isNull(humidity) && !isNull(corrected_timestamp) && length(toString(corrected_timestamp)) <= 10) ~> filter1",
						"filter1 derive(corrected_timestamp = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          temp_C = round(temp - 273.15, 2),",
						"          temp_min_C = round(temp_min - 273.15, 2),",
						"          temp_max_C = round(temp_max - 273.15, 2),",
						"          feels_like_C = round(feels_like - 273.15, 2),",
						"          feels_like_F = round((feels_like * 9/5) + 32, 2),",
						"          temp_min_F = round((temp_min * 9/5) + 32, 2),",
						"          temp_max_F = round((temp_max * 9/5) + 32, 2),",
						"          lon = -71.0589,",
						"          lat = 42.3601,",
						"          weather_id_value = toInteger(split(toString(weather_id[1]), ': ')[1]),",
						"          weather_main_value = split(toString(weather_main), ': ')[1],",
						"          weather_description_value = split(toString(weather_description), ': ')[1],",
						"          weather_icon_value = split(toString(weather_icon), ': ')[1]) ~> derivedColumn3",
						"derivedColumn3 select(mapColumn(",
						"          message,",
						"          cod,",
						"          city_id,",
						"          calctime,",
						"          cnt,",
						"          timestamp,",
						"          feels_like,",
						"          humidity,",
						"          pressure,",
						"          temp,",
						"          temp_max,",
						"          temp_min,",
						"          weather_description,",
						"          weather_icon,",
						"          weather_id,",
						"          weather_main,",
						"          wind_deg,",
						"          wind_speed,",
						"          clouds_all,",
						"          corrected_timestamp,",
						"          location,",
						"          id,",
						"          temp_C,",
						"          temp_min_C,",
						"          temp_max_C,",
						"          feels_like_C,",
						"          feels_like_F,",
						"          temp_min_F,",
						"          temp_max_F,",
						"          lon,",
						"          lat,",
						"          weather_id_value,",
						"          weather_main_value,",
						"          weather_description_value,",
						"          weather_icon_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['silver_weather_historical.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLS_Historical')]",
				"[concat(variables('factoryId'), '/datasets/Parquet1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Historical",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Historical",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Historical')]"
			]
		}
	]
}