{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapsehw598"
		},
		"hw8-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'hw8-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:hw8.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"synapsehw598-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapsehw598-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapsehw598.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"hw8-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ds598storage.dfs.core.windows.net"
		},
		"synapsehw598-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ds598storage.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/hw')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/hw8-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('hw8-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/hw8-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('hw8-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsehw598-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapsehw598-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsehw598-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapsehw598-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/*\nCREATE EXTERNAL DATA SOURCE MyDataSource\nWITH (\n    LOCATION = 'https://ds598storage.blob.core.windows.net/container-ds598'\n);\n*/\n\n\n/*\nCREATE EXTERNAL FILE FORMAT ParquetFileFormat\nWITH (\n    FORMAT_TYPE = PARQUET\n);\n*/\n\n\n\nCREATE EXTERNAL TABLE ExternalAirPollution (\n    lon FLOAT,\n    lat FLOAT,\n    aqi INT,\n    co FLOAT,\n    no INT,  \n    no2 FLOAT,\n    o3 FLOAT,\n    so2 FLOAT,\n    pm2_5 FLOAT,\n    pm10 FLOAT,\n    nh3 FLOAT,\n    corrected_timestamp FLOAT,  -- Proper data type mapping\n    location VARCHAR(100),\n    date_time VARCHAR(100), \n    id VARCHAR(100),\n    us_aqi INT,\n    o3_8hr FLOAT,  \n    o3_1hr FLOAT,  \n    pm2_5_24hr FLOAT,  \n    pm10_24hr FLOAT,  \n    co_8hr FLOAT,  \n    so2_1hr FLOAT,  \n    so2_24hr FLOAT,  \n    no2_1hr FLOAT  \n)\nWITH (\n    LOCATION = '/gold/processed_air_pollution/',\n    DATA_SOURCE = MyDataSource,\n    FILE_FORMAT = ParquetFileFormat\n);\nGO\n\n\n\nCREATE EXTERNAL TABLE ExternalWeather ( --if your variable names differ, edit it accordingly\n feels_like FLOAT,\n humidity FLOAT,\n pressure FLOAT,\n temp FLOAT,\n temp_max FLOAT,\n temp_min FLOAT,\n wind_deg FLOAT,\n wind_speed FLOAT,\n clouds_all FLOAT,\n date_time DATETIME,\n location VARCHAR(100),\n id VARCHAR(100),\n temp_C FLOAT,\n temp_min_C FLOAT,\n temp_max_C FLOAT,\n feels_like_C FLOAT,\n feels_like_F FLOAT,\n temp_min_F FLOAT,\n temp_max_F FLOAT,\n lon FLOAT,\n lat FLOAT,\n weather_id_value VARCHAR(100),\n weather_main_value VARCHAR(100),\n weather_description_value VARCHAR(100),\n weather_icon_value VARCHAR(100),\n corrected_timestamp FLOAT\n )\nWITH (\n    LOCATION = '/gold/processed_weather/processed_weather.parquet',\n    DATA_SOURCE = MyDataSource,\n    FILE_FORMAT = ParquetFileFormat\n);\nGO\n\n\n\nCREATE EXTERNAL TABLE ExternalAggWeather (\n    date VARCHAR(100),  -- Changed from DATE to VARCHAR(100) to match string data type in Parquet\n    avg_temp_F FLOAT,\n    avg_humidity FLOAT,\n    avg_wind_speed FLOAT,\n    max_temp_F FLOAT,\n    min_temp_F FLOAT,\n    weather_records BIGINT  -- Changed from INT to BIGINT to match int64 in Parquet\n)\nWITH (\n    LOCATION = '/gold/agg_weather/',\n    DATA_SOURCE = MyDataSource,\n    FILE_FORMAT = ParquetFileFormat\n);\nGO\n\n\nCREATE EXTERNAL TABLE ExternalAggWeatherConditions (\n    date VARCHAR(100),  -- Changed from DATE to VARCHAR(100) to match string data type in Parquet\n    weather_main_value VARCHAR(100),\n    count BIGINT  -- Changed from INT to BIGINT to match int64 in Parquet\n)\nWITH (\n    LOCATION = '/gold/agg_weather_conditions/',\n    DATA_SOURCE = MyDataSource,\n    FILE_FORMAT = ParquetFileFormat\n);\nGO\n\n\nCREATE EXTERNAL TABLE ExternalAggTempExtremes (\n    date VARCHAR(100),  -- Changed from DATE to VARCHAR(100) to match string data type in Parquet\n    max_temp_F FLOAT,   -- Stays as FLOAT because double maps to FLOAT in SQL\n    min_temp_F FLOAT    -- Stays as FLOAT because double maps to FLOAT in SQL\n)\nWITH (\n    LOCATION = '/gold/agg_temp_extremes/',\n    DATA_SOURCE = MyDataSource,\n    FILE_FORMAT = ParquetFileFormat\n);\nGO\n\n\nCREATE EXTERNAL TABLE ExternalAggAQI (\n    date VARCHAR(100),    -- Changed from DATE to VARCHAR(100) to match string data type in Parquet\n    avg_us_aqi FLOAT      -- Stays as FLOAT because double maps to FLOAT in SQL\n)\nWITH (\n    LOCATION = '/gold/agg_aqi/',\n    DATA_SOURCE = MyDataSource,\n    FILE_FORMAT = ParquetFileFormat\n);\nGO\n\n\nCREATE EXTERNAL TABLE ExternalAggPollutants (\n    date VARCHAR(100),     -- Changed from DATE to VARCHAR(100) to match string data type in Parquet\n    avg_co FLOAT,          -- Stays as FLOAT because double maps to FLOAT in SQL\n    avg_no2 FLOAT,         \n    avg_o3 FLOAT,          \n    avg_so2 FLOAT,         \n    avg_pm2_5 FLOAT,       \n    avg_pm10 FLOAT         \n)\nWITH (\n    LOCATION = '/gold/agg_pollutants/',\n    DATA_SOURCE = MyDataSource,\n    FILE_FORMAT = ParquetFileFormat\n);\nGO\n\n\nCREATE EXTERNAL TABLE ExternalHighPollutionEvents (\n    date VARCHAR(100),              -- Changed from DATE to VARCHAR(100) to match string data type in Parquet\n    high_pollution_events INT       -- Stays as INT, can be kept as INT if values are within the range of INT\n)\nWITH (\n    LOCATION = '/gold/agg_high_pollution_events/',\n    DATA_SOURCE = MyDataSource,\n    FILE_FORMAT = ParquetFileFormat\n);\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "hw",
						"poolName": "hw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create FactWeather table\nCREATE TABLE FactWeather (\n feels_like FLOAT,\n humidity FLOAT,\n pressure FLOAT,\n temp FLOAT,\n temp_max FLOAT,\n temp_min FLOAT,\n wind_deg FLOAT,\n wind_speed FLOAT,\n clouds_all FLOAT,\n date_time DATETIME,\n location VARCHAR(100),\n id VARCHAR(100),\n temp_C FLOAT,\n temp_min_C FLOAT,\n temp_max_C FLOAT,\n feels_like_C FLOAT,\n feels_like_F FLOAT,\n temp_min_F FLOAT,\n temp_max_F FLOAT,\n lon FLOAT,\n lat FLOAT,\n weather_id_value VARCHAR(100),\n weather_main_value VARCHAR(100),\n weather_description_value VARCHAR(100),\n weather_icon_value VARCHAR(100),\n corrected_timestamp FLOAT,\n weather_combined_value VARCHAR(200),\n date DATE\n);\nGO\n\n-- Insert data into FactWeather\nINSERT INTO FactWeather (\n    id, date_time, date, location, humidity, pressure,\n    clouds_all, wind_deg, wind_speed,\n    temp, feels_like, temp_max, temp_min,\n    temp_C, feels_like_C, temp_max_C, temp_min_C,\n    feels_like_F, temp_max_F, temp_min_F,\n    weather_combined_value\n)\nSELECT\n    id,\n    date_time,\n    CAST(date_time AS DATE) AS date,\n    location,\n    humidity,\n    pressure,\n    clouds_all,\n    wind_deg,\n    wind_speed,\n    temp,\n    feels_like,\n    temp_max,\n    temp_min,\n    temp_C,\n    feels_like_C,\n    temp_max_C,\n    temp_min_C,\n    feels_like_F,\n    temp_max_F,\n    temp_min_F,\n    CONCAT(weather_id_value, '_', weather_icon_value) AS weather_combined_value\nFROM ExternalWeather\nWHERE\n    date_time IS NOT NULL;\nGO\n\n-- Create DimAirPollution table\nCREATE TABLE DimAirPollution (\n    id VARCHAR(100),\n    aqi INT,\n    co FLOAT,\n    no FLOAT,\n    no2 FLOAT,\n    o3 FLOAT,\n    so2 FLOAT,\n    pm2_5 FLOAT,\n    pm10 FLOAT,\n    nh3 FLOAT,\n    us_aqi INT\n);\nGO\n\n-- Insert data into DimAirPollution\nINSERT INTO DimAirPollution (\n    id, aqi, co, no, no2, o3, so2, pm2_5, pm10, nh3, us_aqi\n)\nSELECT DISTINCT\n    id,\n    aqi,\n    co,\n    no,\n    no2,\n    o3,\n    so2,\n    pm2_5,\n    pm10,\n    nh3,\n    us_aqi\nFROM ExternalAirPollution;\nGO\n\n-- Create DimLocation table\nCREATE TABLE DimLocation (\n    location VARCHAR(100),\n    lon FLOAT,\n    lat FLOAT\n);\nGO\n\n-- Insert data into DimLocation\nINSERT INTO DimLocation (\n    location, lon, lat\n)\nSELECT DISTINCT\n    location,\n    lon,\n    lat\nFROM ExternalWeather;\nGO\n\n-- Create DimWeatherCondition table##################\nCREATE TABLE DimWeatherCondition (\n    weather_id_value INT,\n    weather_icon_value VARCHAR(10),\n    weather_main_value VARCHAR(100),\n    weather_description_value VARCHAR(100),\n    weather_combined_value VARCHAR(110)\n);\nGO\n\n-- Insert data into DimWeatherCondition\nINSERT INTO DimWeatherCondition (\n    weather_id_value, weather_icon_value, weather_main_value,\n    weather_description_value, weather_combined_value\n)\nSELECT DISTINCT\n    weather_id_value,\n    weather_icon_value,\n    weather_main_value,\n    weather_description_value,\n    CONCAT(weather_id_value, '_', weather_icon_value) AS weather_combined_value\nFROM ExternalWeather;\nGO\n\n-- Create DimDateTime table\nCREATE TABLE DimDateTime (\n    date_time DATETIME,\n    date DATE,\n    year INT,\n    month INT,\n    day INT,\n    hour INT,\n    minute INT,\n    second INT,\n    quarter INT,\n    week INT,\n    day_of_week INT,\n    day_name VARCHAR(10),\n    month_name VARCHAR(10),\n    is_weekend BIT\n);\nGO\n\n-- Insert data into DimDateTime\nINSERT INTO DimDateTime (\n    date_time, date, year, month, day, hour, minute,\n    second, quarter, week, day_of_week, day_name,\n    month_name, is_weekend\n)\nSELECT DISTINCT\n    date_time,\n    CAST(date_time AS DATE) AS date,\n    DATEPART(YEAR, date_time) AS year,\n    DATEPART(MONTH, date_time) AS month,\n    DATEPART(DAY, date_time) AS day,\n    DATEPART(HOUR, date_time) AS hour,\n    DATEPART(MINUTE, date_time) AS minute,\n    DATEPART(SECOND, date_time) AS second,\n    DATEPART(QUARTER, date_time) AS quarter,\n    DATEPART(WEEK, date_time) AS week,\n    DATEPART(WEEKDAY, date_time) AS day_of_week,\n    DATENAME(WEEKDAY, date_time) AS day_name,\n    DATENAME(MONTH, date_time) AS month_name,\n    CASE WHEN DATEPART(WEEKDAY, date_time) IN (1, 7) THEN 1 ELSE 0 END AS is_weekend\nFROM ExternalWeather;\nGO\n\n\n\nCREATE TABLE DimDate (\n    date DATE,\n    year INT,\n    month INT,\n    day INT,\n    quarter INT,\n    week INT,\n    day_of_week INT,\n    day_name VARCHAR(10),\n    month_name VARCHAR(10),\n    is_weekend BIT\n);\nGO\n\nINSERT INTO DimDate (\n    date, year, month, day, quarter, week, day_of_week,\n    day_name, month_name, is_weekend\n)\nSELECT DISTINCT\n    CAST(date_time AS DATE) AS date,\n    DATEPART(YEAR, date_time) AS year,\n    DATEPART(MONTH, date_time) AS month,\n    DATEPART(DAY, date_time) AS day,\n    DATEPART(QUARTER, date_time) AS quarter,\n    DATEPART(WEEK, date_time) AS week,\n    DATEPART(WEEKDAY, date_time) AS day_of_week,\n    DATENAME(WEEKDAY, date_time) AS day_name,\n    DATENAME(MONTH, date_time) AS month_name,\n    CASE WHEN DATEPART(WEEKDAY, date_time) IN (1, 7) THEN 1 ELSE 0 END AS is_weekend\nFROM ExternalWeather;\nGO\n\n\n-- Create AggWeather table\nCREATE TABLE AggWeather (\n    date DATE,\n    avg_temp_F FLOAT,\n    avg_humidity FLOAT,\n    avg_wind_speed FLOAT,\n    max_temp_F FLOAT,\n    min_temp_F FLOAT,\n    weather_records BIGINT\n);\nGO\n\n-- Populate AggWeather table from ExternalAggWeather\nINSERT INTO AggWeather (\n    date, avg_temp_F, avg_humidity, avg_wind_speed,\n    max_temp_F, min_temp_F, weather_records\n)\nSELECT \n    CAST(date AS DATE),\n    avg_temp_F,\n    avg_humidity,\n    avg_wind_speed,\n    max_temp_F,\n    min_temp_F,\n    weather_records\nFROM ExternalAggWeather;\nGO\n\n\n-- Create AggWeatherConditions table\nCREATE TABLE AggWeatherConditions (\n    date DATE,\n    weather_main_value VARCHAR(100),\n    condition_count BIGINT\n);\nGO\n\n-- Populate AggWeatherConditions table from ExternalAggWeatherConditions\nINSERT INTO AggWeatherConditions (\n    date, weather_main_value, condition_count\n)\nSELECT \n    CAST(date AS DATE),\n    weather_main_value,\n    count AS condition_count\nFROM ExternalAggWeatherConditions;\nGO\n\n\n-- Create AggTempExtremes table\nCREATE TABLE AggTempExtremes (\n    date DATE,\n    max_temp_F FLOAT,\n    min_temp_F FLOAT\n);\nGO\n\n-- Populate AggTempExtremes table from ExternalAggTempExtremes\nINSERT INTO AggTempExtremes (\n    date, max_temp_F, min_temp_F\n)\nSELECT \n    CAST(date AS DATE),\n    max_temp_F,\n    min_temp_F\nFROM ExternalAggTempExtremes;\nGO\n\n\n-- Create AggAQI table\nCREATE TABLE AggAQI (\n    date DATE,\n    avg_us_aqi FLOAT\n);\nGO\n\n-- Populate AggAQI table from ExternalAggAQI\nINSERT INTO AggAQI (\n    date, avg_us_aqi\n)\nSELECT \n    CAST(date AS DATE),\n    avg_us_aqi\nFROM ExternalAggAQI;\nGO\n\n\n-- Create AggPollutants table\nCREATE TABLE AggPollutants (\n    date DATE,\n    avg_co FLOAT,\n    avg_no2 FLOAT,\n    avg_o3 FLOAT,\n    avg_so2 FLOAT,\n    avg_pm2_5 FLOAT,\n    avg_pm10 FLOAT\n);\nGO\n\n-- Populate AggPollutants table from ExternalAggPollutants\nINSERT INTO AggPollutants (\n    date, avg_co, avg_no2, avg_o3, avg_so2, avg_pm2_5, avg_pm10\n)\nSELECT \n    CAST(date AS DATE),\n    avg_co,\n    avg_no2,\n    avg_o3,\n    avg_so2,\n    avg_pm2_5,\n    avg_pm10\nFROM ExternalAggPollutants;\nGO\n\n\n-- Create HighPollutionEvents table\nCREATE TABLE HighPollutionEvents (\n    date DATE,\n    high_pollution_events INT\n);\nGO\n\n-- Populate HighPollutionEvents table from ExternalHighPollutionEvents\nINSERT INTO HighPollutionEvents (\n    date, high_pollution_events\n)\nSELECT \n    CAST(date AS DATE),\n    high_pollution_events\nFROM ExternalHighPollutionEvents;\nGO\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQL_Pool",
						"poolName": "SQL_Pool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP 10 * FROM FactWeather;\nSELECT TOP 10 * FROM DimLocation;\nSELECT TOP 10 * FROM DimAirPollution;\nSELECT TOP 10 * FROM DimWeatherCondition;\nSELECT TOP 10 * FROM DimDateTime;\nSELECT TOP 10 * FROM DimDate;\nSELECT TOP 10 * FROM AggWeather;\nSELECT TOP 10 * FROM AggWeatherConditions;\nSELECT TOP 10 * FROM AggTempExtremes;\nSELECT TOP 10 * FROM AggAQI;\nSELECT TOP 10 * FROM AggPollutants;\nSELECT TOP 10 * FROM HighPollutionEvents;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "hw",
						"poolName": "hw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "DROP TABLE DimLocation;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "hw",
						"poolName": "hw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "DROP EXTERNAL TABLE ExternalAggAQI;\nDROP EXTERNAL TABLE ExternalAggPollutants;\nDROP EXTERNAL TABLE ExternalAggTempExtremes;\nDROP EXTERNAL TABLE ExternalAggWeather;\nDROP EXTERNAL TABLE ExternalAggWeatherConditions;\nDROP EXTERNAL TABLE ExternalAirPollution;\nDROP EXTERNAL TABLE ExternalHighPollutionEvents;\nDROP EXTERNAL TABLE ExternalWeather;\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "hw",
						"poolName": "hw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 6')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create DimLocation Table\nCREATE TABLE DimLocation (\n    id NVARCHAR(100),           -- Unique identifier for the location (e.g., id from ExternalWeather or ExternalAirPollution)\n    location VARCHAR(100),      -- Name of the location (city, region, or broader area)\n    lat FLOAT,                  -- Latitude of the location\n    lon FLOAT,                  -- Longitude of the location\n    weather_icon_value VARCHAR(100), -- Weather icon (optional based on ExternalWeather)\n    weather_main_value VARCHAR(100), -- Main weather type (optional based on ExternalWeather)\n    weather_description_value VARCHAR(255)  -- Detailed description of the weather (optional based on ExternalWeather)\n);\nGO\n-- Insert data into DimLocation from ExternalWeather or ExternalAirPollution\nINSERT INTO DimLocation (id, location, lat, lon, weather_icon_value, weather_main_value, weather_description_value)\nSELECT DISTINCT\n    id,                                -- Unique location identifier\n    location,                          -- Location name (e.g., city or area)\n    lat,                               -- Latitude\n    lon,                               -- Longitude\n    weather_icon_value,                -- Weather icon value (optional)\n    weather_main_value,                -- Main weather type (optional)\n    weather_description_value         -- Detailed weather description (optional)\nFROM\n    ExternalWeather                   -- You can also select from ExternalAirPollution if needed\nWHERE\n    location IS NOT NULL;             -- Ensure the location is not null\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "hw",
						"poolName": "hw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/hw')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus2"
		}
	]
}